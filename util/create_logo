#!/bin/bash
set -euo pipefail

# --- Configuration ---
# USE_JXL_OVERLAY=true # if true, use the margin and jxl image; if false, just the snowflake and text without any overlay
USE_JXL_OVERLAY=false # if true, use the margin and jxl image; if false, just the snowflake and text without any overlay
JXL_INPUT="/home/oboro/media/main/1702582978"
SNOWFLAKE_IMAGE="./snowflake.png"
FONT_PATH="/usr/share/fonts/ttf/Cagliostro-Regular.ttf" # <Tinos
FONT_PATH="/usr/share/fonts/ttf/Caudex-Regular.ttf" # <Tinos a bit too fantasy
FONT_PATH="/usr/share/fonts/ttf/Tinos-Regular.ttf"
FONT_PATH="/usr/share/fonts/ttf/CaveatBrush-Regular.ttf" # hmm not elegant enough?
FONT_PATH="/usr/share/fonts/ttf/ChironSungHK-LightItalic.ttf" # no
FONT_PATH="/usr/share/fonts/ttf/ChironSungHK-SemiBoldItalic.ttf" # >LightItalic, <Regular
FONT_PATH="/usr/share/fonts/ttf/ChironSungHK-Black.ttf" # <Regular
FONT_PATH="/usr/share/fonts/ttf/ChironSungHK-BoldItalic.ttf" # <Regular
FONT_PATH="/usr/share/fonts/ttf/ChironSungHK-Medium.ttf" # hmm also pretty good, maybe >Regular but slightly <Light
FONT_PATH="/usr/share/fonts/ttf/ChironSungHK-Regular.ttf" # >Tinos, best so far
FONT_PATH="/usr/share/fonts/ttf/ChironSungHK-Italic.ttf" # <Regular, has some style but a bit too much
FONT_PATH="/usr/share/fonts/ttf/ChironSungHK-Bold.ttf" # <Regular
FONT_PATH="/usr/share/fonts/ttf/ChironSungHK-ExtraBold.ttf" # <Regular
FONT_PATH="/usr/share/fonts/ttf/ChironSungHK-ExtraLight.ttf" # <Light, maybe a bit too light now

FONT_PATH="/usr/share/fonts/ttf/ChironSungHK-Light.ttf" # slightly lighter, >Regular, best so far
FONT_PATH="/usr/share/fonts/ttf/Gaegu-Regular.ttf" # eh not sure, probably too wimpy. people will think that's my handwriting
FONT_PATH="/usr/share/fonts/ttf/Kurale-Regular.ttf" # decent
FONT_PATH="/usr/share/fonts/ttf/Lora-Regular.ttf" # <Chiron, too wobbly
FONT_PATH="/usr/share/fonts/ttf/Merriweather_48pt-Light.ttf" # <Chiron, weird
FONT_PATH="/usr/share/fonts/ttf/NotoSansJP-Regular.ttf" # <Chiron, uninspiring
FONT_PATH="/usr/share/fonts/ttf/NotoSansJP-ExtraLight.ttf" # better but still not great maybe
FONT_PATH="/usr/share/fonts/ttf/NotoSansJP-Thin.ttf"
FONT_PATH="/usr/share/fonts/ttf/NotoSansJP-ExtraBold.ttf" # no
FONT_PATH="/usr/share/fonts/ttf/NotoSerifJP-Light.ttf" # quite good
FONT_PATH="/usr/share/fonts/ttf/NotoSerifJP-Regular.ttf" # quite good
FONT_PATH="/usr/share/fonts/ttf/NotoSerifJP-Bold.ttf" # also not bad to be honest
FONT_PATH="/usr/share/fonts/ttf/NotoSerifJP-ExtraBold.ttf" # also not bad to be honest
FONT_PATH="/usr/share/fonts/ttf/NotoSerifJP-ExtraLight.ttf" # might lean towards this over the ExtraBold

FONT_PATH="/usr/share/fonts/ttf/PatrickHand-Regular.ttf" # too unserious
FONT_PATH="/usr/share/fonts/ttf/PlayfairDisplay-Medium.ttf" # not bad
FONT_PATH="/usr/share/fonts/ttf/PlayfairDisplay-Regular.ttf" # not bad
FONT_PATH="/usr/share/fonts/ttf/PlayfairDisplay-Italic.ttf" # bad
FONT_PATH="/usr/share/fonts/ttf/PlayfairDisplay-ExtraBold.ttf" # too much
FONT_PATH="/usr/share/fonts/ttf/PlayfairDisplay-SemiBold.ttf" # not bad
FONT_PATH="/usr/share/fonts/ttf/PlayfairDisplay-Bold.ttf" # slightly too much

FONT_PATH="/usr/share/fonts/ttf/WinkyRough-Regular.ttf" # eh
FONT_PATH="/usr/share/fonts/ttf/WinkyRough-Light.ttf" # eh
FONT_PATH="/usr/share/fonts/ttf/WinkyRough-Bold.ttf" # yeah too fluffy

FONT_PATH="/usr/share/fonts/ttf/ChironSungHK-Light.ttf" # slightly lighter, >Regular, best so far

# options
# Kurale
# Chiron (Light)
# NotoSerifJP
# PlayfairDisplay

# SNOWFLAKE_SIZE_ADJUST=1.0 # Multiplier for snowflake size relative to text height. 1.0 is same height.
# SNOWFLAKE_TEXT_SPACING=25 # Horizontal distance in pixels between snowflake and text.

# 1.5 has more personality
SNOWFLAKE_SIZE_ADJUST=1.5 # Multiplier for snowflake size relative to text height. 1.0 is same height.
SNOWFLAKE_TEXT_SPACING=20 # Horizontal distance in pixels between snowflake and text.
# SNOWFLAKE_TEXT_SPACING=25 # Horizontal distance in pixels between snowflake and text.
# SNOWFLAKE_TEXT_SPACING=35 # Horizontal distance in pixels between snowflake and text.
# SNOWFLAKE_TEXT_SPACING=43 # Horizontal distance in pixels between snowflake and text.
# 50 is too much

# 1750319817 I'm going with 1.5, 20 for now

# TEXT_COLOR="#6ec8ff"
# TEXT_COLOR="#fff"
TEXT_COLOR="#e0f1ff"
# TEXT_COLOR="#6ec8ff"
SNOWFLAKE_COLOR="#6ec8ff" # Color for the snowflake image/emoji
# SNOWFLAKE_COLOR="#fff" # Color for the snowflake image/emoji
# POINT_SIZE=100
POINT_SIZE=200
# MARGIN=20
MARGIN=40
OUTPUT_LOGO="hinata_logo.png"

# --- Mode Selection ---
USE_IMAGE_MODE=false
# A simple check for a command-line flag.
if [[ "${1:-}" == "--use-image" ]]; then
    USE_IMAGE_MODE=true
fi

# --- Script Logic ---
if [ "$USE_IMAGE_MODE" = true ]; then
    echo "Generating logo using snowflake image..."
    if [ ! -f "$SNOWFLAKE_IMAGE" ]; then
        echo "Error: Snowflake image not found at $SNOWFLAKE_IMAGE" >&2
        exit 1
    fi

    # The previous single-command `magick` process proved unreliable. This has been
    # rewritten into a more robust, explicit two-step process using a temporary file.

    # Step 1: Render the text to a temporary file to determine its exact height.
    # A temporary file is created and we ensure it's cleaned up on script exit.
    TMP_TEXT=$(mktemp --suffix=.png)
    trap 'rm -f "$TMP_TEXT"' EXIT

    # Create the "hinata" text image (without leading space) and save it to the temporary file.
    magick \
        -background transparent -fill "$TEXT_COLOR" -font "$FONT_PATH" \
        -pointsize "$POINT_SIZE" label:"hinata" -trim +repage \
        "$TMP_TEXT"

    # Use `identify` to get the height of the rendered text.
    TEXT_HEIGHT=$(identify -format '%h' "$TMP_TEXT")

    # Calculate snowflake height based on text height and adjustment factor.
    # Using bc for floating point math and printf to round to nearest integer.
    SNOWFLAKE_HEIGHT=$(printf "%.0f\n" "$(echo "$TEXT_HEIGHT * $SNOWFLAKE_SIZE_ADJUST" | bc)")

    # Step 2: Assemble the final image using the known text height.
    # This command now works with a concrete height, which is more reliable.
    # Process:
    # a. Load `snowflake.png` and trim whitespace.
    # b. Resize it to match the text height stored in `$TEXT_HEIGHT`.
    # c. Tint the snowflake to its configured color.
    # d. Load the pre-rendered text from the temporary file (`$TMP_TEXT`).
    # e. Append the snowflake and text images horizontally.
    # f. Add the border and composite the JXL overlay as before.
    if [ "$USE_JXL_OVERLAY" = true ]; then
        magick \
            \( "$SNOWFLAKE_IMAGE" -trim \) \
            -resize "x${SNOWFLAKE_HEIGHT}" \
            -fill "$SNOWFLAKE_COLOR" -colorize 100% \
            -background transparent -gravity East -splice "${SNOWFLAKE_TEXT_SPACING}x0" \
            "$TMP_TEXT" \
            -gravity center \
            +append \
            -bordercolor transparent -border "$MARGIN" \
            "$JXL_INPUT" -gravity center -compose over -composite \
            "$OUTPUT_LOGO"
    else
        magick \
            \( "$SNOWFLAKE_IMAGE" -trim \) \
            -resize "x${SNOWFLAKE_HEIGHT}" \
            -fill "$SNOWFLAKE_COLOR" -colorize 100% \
            -background transparent -gravity East -splice "${SNOWFLAKE_TEXT_SPACING}x0" \
            "$TMP_TEXT" \
            -gravity center \
            +append \
            "$OUTPUT_LOGO"
    fi

else
    echo "Generating logo using emoji font (Pango)..."

    # This command uses the Pango text rendering engine, which correctly handles
    # font fallback for rendering both standard text and emojis.
    # Process:
    # 1. A sub-process \`\( ... \)\` creates the text layer in memory using pango.
    #    The markup \`<span font_family="...">\` specifies the exact font for each part of the string.
    # 2. The rendered graphic is trimmed, a border is added, and it is then composited with the JXL.
    if [ "$USE_JXL_OVERLAY" = true ]; then
        magick \
            \( \
                -background transparent \
                -pointsize "$POINT_SIZE" \
                pango:"<span font_family=\"Noto Color Emoji\" foreground=\"$SNOWFLAKE_COLOR\">❄️</span><span font_family=\"Tinos\" foreground=\"$TEXT_COLOR\"> hinata</span>" \
                -trim +repage \
                -bordercolor transparent -border "$MARGIN" \
            \) \
            "$JXL_INPUT" -gravity center -compose over -composite \
            "$OUTPUT_LOGO"
    else
        magick \
            -background transparent \
            -pointsize "$POINT_SIZE" \
            pango:"<span font_family=\"Noto Color Emoji\" foreground=\"$SNOWFLAKE_COLOR\">❄️</span><span font_family=\"Tinos\" foreground=\"$TEXT_COLOR\"> hinata</span>" \
            -trim +repage \
            "$OUTPUT_LOGO"
    fi
fi

echo "Success! Logo created at ./${OUTPUT_LOGO}"
