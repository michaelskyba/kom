#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys
import tempfile
import io
import shutil
from pathlib import Path


# Command to pipe output through for syntax highlighting
SYNTAX_HIGHLIGHT_PIPE_CMD = ["hlmd-st"]

# more complex but feature-rich alternative
# https://github.com/kristopolous/Streamdown

# don't use. doesn't buffer
# SYNTAX_HIGHLIGHT_PIPE_CMD = ["rich", "-m", "-"]


def run_command(cmd, stdin_content=None, capture_output=True, check=True, text=True):
    """Helper function to run a command."""
    try:
        process = subprocess.run(
            cmd,
            input=stdin_content,
            capture_output=capture_output,
            check=check,
            text=text,
        )
        return process
    except FileNotFoundError:
        print(f"Error: Command not found: {cmd[0]}", file=sys.stderr)
        sys.exit(1)
    except subprocess.CalledProcessError as e:
        print(
            f"Error: Command '{' '.join(cmd)}' failed with exit code {e.returncode}",
            file=sys.stderr,
        )
        if e.stderr:
            print(f"Stderr:\n{e.stderr}", file=sys.stderr)
        if e.stdout:
            print(f"Stdout:\n{e.stdout}", file=sys.stderr)
        sys.exit(e.returncode)
    except Exception as e:
        print(
            f"An unexpected error occurred while running {' '.join(cmd)}: {e}",
            file=sys.stderr,
        )
        sys.exit(1)


def get_user_instruction(message_arg):
    """Gets the user instruction either from args or by launching EDITOR."""
    if message_arg:
        return message_arg

    editor = os.environ.get("EDITOR", "vi")
    initial_text = """Replace this text with your instructions. Then write to this file and exit your
text editor. Leave the file unchanged or empty to abort."""

    try:
        with tempfile.NamedTemporaryFile(
            mode="w+", prefix="hnt-edit-", suffix=".md", delete=False
        ) as tmpfile:
            tmpfile.write(initial_text)
            tmpfile.flush()
            tmp_path = tmpfile.name

        # Run the editor - use run instead of Popen to wait for it
        run_command([editor, tmp_path], capture_output=False, check=True)

        # Read the content after editor exits
        with open(tmp_path, "r") as f:
            instruction = f.read().strip()

        # Clean up the temp file
        os.unlink(tmp_path)

        # Remove any whitespace for checking empty/unchanged
        stripped_instruction = instruction.strip()
        if not stripped_instruction or stripped_instruction == initial_text.strip():
            print("Aborted: No changes were made.", file=sys.stderr)
            sys.exit(0)
        return instruction

    except Exception as e:
        print(f"Error getting user instruction via editor: {e}", file=sys.stderr)
        if "tmp_path" in locals() and os.path.exists(tmp_path):
            os.unlink(tmp_path)  # Ensure cleanup on error
        sys.exit(1)


def get_system_message(system_arg):
    """Gets the system message either from args or default file."""
    if system_arg:
        # Check if it's a file path that exists
        if os.path.exists(system_arg):
            try:
                with open(system_arg, "r") as f:
                    return f.read()
            except IOError as e:
                print(f"Error reading system file {system_arg}: {e}", file=sys.stderr)
                sys.exit(1)
        else:
            # Assume it's the literal system message string
            return system_arg
    else:
        # Default path
        config_home = os.environ.get("XDG_CONFIG_HOME", os.path.expanduser("~/.config"))
        default_path = Path(config_home) / "hinata" / "prompts" / "01-targetreplace.md"
        try:
            with open(default_path, "r") as f:
                return f.read()
        except FileNotFoundError:
            print(
                f"Error: Default system file not found: {default_path}", file=sys.stderr
            )
            sys.exit(1)
        except IOError as e:
            print(
                f"Error reading default system file {default_path}: {e}",
                file=sys.stderr,
            )
            sys.exit(1)


def main():
    # --- Syntax Highlighting Check ---
    syntax_highlight_enabled = False
    highlighter_executable = None
    if SYNTAX_HIGHLIGHT_PIPE_CMD:
        highlighter_executable = shutil.which(SYNTAX_HIGHLIGHT_PIPE_CMD[0])
        if highlighter_executable:
            syntax_highlight_enabled = True
            # Use the full path found by `which`
            SYNTAX_HIGHLIGHT_PIPE_CMD[0] = highlighter_executable
        else:
            print(
                f"Info: Syntax highlighter '{SYNTAX_HIGHLIGHT_PIPE_CMD[0]}' not found in PATH. Highlighting disabled.",
                file=sys.stderr,
            )
    # --- End Syntax Highlighting Check ---

    parser = argparse.ArgumentParser(
        description="Edit files using hinata LLM agent.",
        epilog="Example: hnt-edit -m 'Refactor foo function' src/main.py src/utils.py",
    )
    parser.add_argument(
        "-s",
        "--system",
        help="System message string or path to system message file. Defaults to $XDG_CONFIG_HOME/hinata/prompts/01-targetreplace.md",
    )
    parser.add_argument(
        "-m",
        "--message",
        help="User instruction message. If not provided, $EDITOR will be opened.",
    )
    parser.add_argument(
        "source_files", nargs="+", help="One or more source files to edit."
    )
    parser.add_argument("--model", help="Model to use (passed through to hnt-llm)")
    args = parser.parse_args()

    # 1. Get system message
    system_message = get_system_message(args.system)

    # 2. Get user instruction
    instruction = get_user_instruction(args.message)

    # 3. Run llm-pack
    llm_pack_cmd = ["llm-pack", "-s"] + args.source_files
    llm_pack_result = run_command(
        llm_pack_cmd, capture_output=True, check=True, text=True
    )
    packed_sources = llm_pack_result.stdout

    # 4. Prepare input for hnt-llm
    hnt_llm_input = (
        f"User request:\n{instruction}\n\nSource reference:\n{packed_sources}"
    )

    # Show user query if it came from EDITOR
    if not args.message:
        print("-" * 40)
        print(instruction)
        print("-" * 40 + "\n")

    # 5. Run hnt-llm -s, stream and capture output
    hnt_llm_cmd = ["hnt-llm", "-s", system_message]
    if args.model:
        hnt_llm_cmd.extend(["--model", args.model])
    hnt_llm_output_capture = io.StringIO()
    rich_process = None  # Initialize rich_process outside try

    try:
        # Use Popen for streaming stdout
        hnt_llm_process = subprocess.Popen(
            hnt_llm_cmd,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,  # Capture stderr too
            text=True,
            bufsize=1,  # Line buffered, might help with streaming
            # universal_newlines=True # Alternative to text=True
        )

        # Start syntax highlighter process if enabled
        # rich_process = None # Moved outside the try block
        if syntax_highlight_enabled:
            try:
                rich_process = subprocess.Popen(
                    SYNTAX_HIGHLIGHT_PIPE_CMD,
                    stdin=subprocess.PIPE,
                    stdout=sys.stdout,  # Pipe rich output directly to terminal stdout
                    stderr=sys.stderr,  # Pipe rich errors directly to terminal stderr
                    text=True,
                )
            except FileNotFoundError:
                print(
                    f"Error: Syntax highlighter command failed: {SYNTAX_HIGHLIGHT_PIPE_CMD[0]}",
                    file=sys.stderr,
                )
                syntax_highlight_enabled = False  # Disable if Popen fails
            except Exception as e:
                print(f"Error starting syntax highlighter: {e}", file=sys.stderr)
                syntax_highlight_enabled = False  # Disable on other errors

        # Write input to hnt-llm's stdin in a separate thread or handle potential blocks
        # Simple write for now, assuming input isn't excessively large to block pipe
        hnt_llm_process.stdin.write(hnt_llm_input)
        hnt_llm_process.stdin.close()  # Signal EOF

        # Stream stdout from hnt-llm, capture it, and pipe to rich if enabled
        while True:
            line = hnt_llm_process.stdout.readline()
            if not line:
                break

            # Always capture the raw output
            hnt_llm_output_capture.write(line)

            # Pipe to syntax highlighter OR print directly
            if syntax_highlight_enabled and rich_process:
                try:
                    rich_process.stdin.write(line)
                    rich_process.stdin.flush()
                except BrokenPipeError:
                    # Rich process might have exited (e.g., if user Ctrl+C'd)
                    print("Warning: Syntax highlighter pipe broken.", file=sys.stderr)
                    syntax_highlight_enabled = False  # Stop trying to write
                    # Print remaining lines directly
                    sys.stdout.write(line)
                    sys.stdout.flush()
                except Exception as e:
                    print(f"Error writing to syntax highlighter: {e}", file=sys.stderr)
                    syntax_highlight_enabled = False  # Stop trying to write
                    sys.stdout.write(line)
                    sys.stdout.flush()

            else:
                # Highlighting disabled or failed, print directly
                sys.stdout.write(line)
                sys.stdout.flush()

        # Close rich stdin if it was used
        if rich_process and rich_process.stdin:
            try:
                rich_process.stdin.close()
            except Exception as e:
                print(
                    f"Warning: Error closing syntax highlighter stdin: {e}",
                    file=sys.stderr,
                )

        # Wait for hnt-llm process to finish and check return code
        hnt_llm_rc = hnt_llm_process.wait()
        if hnt_llm_rc != 0:
            # Read any remaining stderr from hnt-llm
            stderr_output = ""
            if hnt_llm_process.stderr:  # Check if stderr was captured
                stderr_output = hnt_llm_process.stderr.read()
            print(
                f"\nError: '{' '.join(hnt_llm_cmd)}' failed with exit code {hnt_llm_rc}",
                file=sys.stderr,
            )
            if stderr_output:
                print(f"hnt-llm Stderr:\n{stderr_output}", file=sys.stderr)
            # Don't exit immediately if rich also needs cleanup/check
            # sys.exit(hnt_llm_rc) # Moved after potential rich wait

    except FileNotFoundError:
        print(
            f"Error: Command not found during Popen: {hnt_llm_cmd[0]}", file=sys.stderr
        )
        sys.exit(1)
    except Exception as e:
        print(
            f"An unexpected error occurred while running {' '.join(hnt_llm_cmd)}: {e}",
            file=sys.stderr,
        )
        # Ensure processes are terminated if they are still running
        if "hnt_llm_process" in locals() and hnt_llm_process.poll() is None:
            hnt_llm_process.terminate()
            hnt_llm_process.wait()  # Ensure termination
        if rich_process and rich_process.poll() is None:
            rich_process.terminate()
            rich_process.wait()  # Ensure termination
        sys.exit(1)
    finally:
        # Ensure resources are cleaned up even if errors occurred mid-stream

        # Wait for rich process if it was started
        rich_rc = 0
        if rich_process:
            rich_rc = rich_process.wait()
            if rich_rc != 0:
                # Rich errors likely already went to stderr, but log rc
                print(
                    f"Info: Syntax highlighter exited with code {rich_rc}",
                    file=sys.stderr,
                )

        # Now check hnt-llm's return code and exit if it failed
        # Use the previously captured return code
        if "hnt_llm_rc" in locals() and hnt_llm_rc != 0:
            sys.exit(hnt_llm_rc)

    final_hnt_llm_output = hnt_llm_output_capture.getvalue()
    hnt_llm_output_capture.close()

    # Check if output is empty (might happen if hnt-llm failed silently or produced nothing)
    if not final_hnt_llm_output.strip():
        print(
            "Warning: hnt-llm produced no output. Aborting before running hnt-apply.",
            file=sys.stderr,
        )
        sys.exit(1)  # Or a specific error code

    # 6. Run hnt-apply
    hnt_apply_cmd = ["hnt-apply"] + args.source_files
    run_command(
        hnt_apply_cmd,
        stdin_content=final_hnt_llm_output,
        capture_output=False,
        check=True,
        text=True,
    )


if __name__ == "__main__":
    main()
