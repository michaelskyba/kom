#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys
import tempfile
import io
import shlex
import shutil
import textwrap
from pathlib import Path


# Command to pipe output through for syntax highlighting
SYNTAX_HIGHLIGHT_PIPE_CMD = ["hlmd-st"]

# more complex but feature-rich alternative
# https://github.com/kristopolous/Streamdown

# don't use. doesn't buffer
# SYNTAX_HIGHLIGHT_PIPE_CMD = ["rich", "-m", "-"]


def run_command(cmd, stdin_content=None, capture_output=True, check=True, text=True):
    """Helper function to run a command."""
    try:
        process = subprocess.run(
            cmd,
            input=stdin_content,
            capture_output=capture_output,
            check=check,
            text=text,
        )
        return process
    except FileNotFoundError:
        print(f"Error: Command not found: {cmd[0]}", file=sys.stderr)
        sys.exit(1)
    except subprocess.CalledProcessError as e:
        print(
            f"Error: Command '{' '.join(cmd)}' failed with exit code {e.returncode}",
            file=sys.stderr,
        )
        if e.stderr:
            print(f"Stderr:\n{e.stderr}", file=sys.stderr)
        if e.stdout:
            print(f"Stdout:\n{e.stdout}", file=sys.stderr)
        sys.exit(e.returncode)
    except Exception as e:
        print(
            f"An unexpected error occurred while running {' '.join(cmd)}: {e}",
            file=sys.stderr,
        )
        sys.exit(1)


def get_user_instruction(message_arg):
    """Gets the user instruction either from args or by launching EDITOR."""
    if message_arg:
        return message_arg

    editor = os.environ.get("EDITOR", "vi")
    initial_text = """Replace this text with your instructions. Then write to this file and exit your
text editor. Leave the file unchanged or empty to abort."""

    try:
        with tempfile.NamedTemporaryFile(
            mode="w+", prefix="hnt-edit-", suffix=".md", delete=False
        ) as tmpfile:
            tmpfile.write(initial_text)
            tmpfile.flush()
            tmp_path = tmpfile.name

        # Run the editor - use run instead of Popen to wait for it
        run_command([editor, tmp_path], capture_output=False, check=True)

        # Read the content after editor exits
        with open(tmp_path, "r") as f:
            instruction = f.read().strip()

        # Clean up the temp file
        os.unlink(tmp_path)

        # Remove any whitespace for checking empty/unchanged
        stripped_instruction = instruction.strip()
        if not stripped_instruction or stripped_instruction == initial_text.strip():
            print("Aborted: No changes were made.", file=sys.stderr)
            sys.exit(0)
        return instruction

    except Exception as e:
        print(f"Error getting user instruction via editor: {e}", file=sys.stderr)
        if "tmp_path" in locals() and os.path.exists(tmp_path):
            os.unlink(tmp_path)  # Ensure cleanup on error
        sys.exit(1)


def get_system_message(system_arg):
    """Gets the system message either from args or default file."""
    if system_arg:
        # Check if it's a file path that exists
        if os.path.exists(system_arg):
            try:
                with open(system_arg, "r") as f:
                    return f.read()
            except IOError as e:
                print(f"Error reading system file {system_arg}: {e}", file=sys.stderr)
                sys.exit(1)
        else:
            # Assume it's the literal system message string
            return system_arg
    else:
        # Default path
        config_home = os.environ.get("XDG_CONFIG_HOME", os.path.expanduser("~/.config"))
        default_path = Path(config_home) / "hinata" / "prompts" / "01-targetreplace.md"
        try:
            with open(default_path, "r") as f:
                return f.read()
        except FileNotFoundError:
            print(
                f"Error: Default system file not found: {default_path}", file=sys.stderr
            )
            sys.exit(1)
        except IOError as e:
            print(
                f"Error reading default system file {default_path}: {e}",
                file=sys.stderr,
            )
            sys.exit(1)


# --- Helper for Debug Logging ---
def debug_log(args, *print_args, **print_kwargs):
    """Prints debug messages to stderr if --debug-unsafe is enabled."""
    if args.debug_unsafe:
        print("[DEBUG]", *print_args, file=sys.stderr, **print_kwargs)


def main():
    # --- Syntax Highlighting Check ---
    syntax_highlight_enabled = False
    effective_syntax_cmd = None  # This will hold the command list to execute

    # Check environment variable first
    env_cmd_str = os.environ.get("HINATA_SYNTAX_HIGHLIGHT_PIPE_CMD")
    if env_cmd_str:
        try:
            # Parse the command string, respecting quotes and spaces
            effective_syntax_cmd = shlex.split(env_cmd_str)
            if effective_syntax_cmd:  # Ensure shlex.split didn't return empty list
                syntax_highlight_enabled = True
            else:
                print(
                    f"Warning: HINATA_SYNTAX_HIGHLIGHT_PIPE_CMD is set but resulted in an empty command after parsing: '{env_cmd_str}'. Highlighting disabled.",
                    file=sys.stderr,
                )
                env_cmd_str = None  # Treat as if not set for fallback logic
        except ValueError as e:
            print(
                f"Warning: Could not parse HINATA_SYNTAX_HIGHLIGHT_PIPE_CMD: '{env_cmd_str}'. Error: {e}. Highlighting disabled.",
                file=sys.stderr,
            )
            env_cmd_str = None  # Treat as if not set for fallback logic

    # If environment variable wasn't used or was invalid, try the default
    if not env_cmd_str and SYNTAX_HIGHLIGHT_PIPE_CMD:
        # Check if the default command exists in PATH
        highlighter_executable = shutil.which(SYNTAX_HIGHLIGHT_PIPE_CMD[0])
        if highlighter_executable:
            syntax_highlight_enabled = True
            # Use the default command, but update executable with full path
            effective_syntax_cmd = SYNTAX_HIGHLIGHT_PIPE_CMD[:]  # Make a copy
            effective_syntax_cmd[0] = highlighter_executable
            # No need to print info message if using default and found
        else:
            # Only print info if default command not found and env var wasn't used
            print(
                f"Info: Default syntax highlighter '{SYNTAX_HIGHLIGHT_PIPE_CMD[0]}' not found in PATH. Highlighting disabled.",
                file=sys.stderr,
            )
    # --- End Syntax Highlighting Check ---

    parser = argparse.ArgumentParser(
        description="Edit files using hinata LLM agent.",
        epilog="Example: hnt-edit -m 'Refactor foo function' src/main.py src/utils.py",
    )
    parser.add_argument(
        "-s",
        "--system",
        help="System message string or path to system message file. Defaults to $XDG_CONFIG_HOME/hinata/prompts/01-targetreplace.md",
    )
    parser.add_argument(
        "-m",
        "--message",
        help="User instruction message. If not provided, $EDITOR will be opened.",
    )
    parser.add_argument(
        "source_files", nargs="+", help="One or more source files to edit."
    )
    parser.add_argument("--model", help="Model to use (passed through to hnt-llm)")
    parser.add_argument(
        "--debug-unsafe",
        action="store_true",
        help="Enable unsafe debugging options in hnt-llm",
    )
    args = parser.parse_args()
    debug_log(args, "Arguments parsed:", args)

    # 1. Get system message
    debug_log(args, "Getting system message...")
    system_message = get_system_message(args.system)
    debug_log(args, "System message source:", args.system or "default path")
    # Log first few lines for brevity
    debug_log(
        args,
        "System message content (first 100 chars):\n",
        textwrap.shorten(system_message, width=100, placeholder="..."),
    )

    # 2. Get user instruction
    debug_log(args, "Getting user instruction...")
    instruction = get_user_instruction(args.message)
    debug_log(
        args, "User instruction source:", "args.message" if args.message else "$EDITOR"
    )
    debug_log(
        args,
        "User instruction content (first 100 chars):\n",
        textwrap.shorten(instruction, width=100, placeholder="..."),
    )

    # 3. Run llm-pack
    debug_log(args, "Running llm-pack...")
    llm_pack_cmd = ["llm-pack", "-s"] + args.source_files
    debug_log(args, "llm-pack command:", llm_pack_cmd)
    llm_pack_result = run_command(
        llm_pack_cmd, capture_output=True, check=True, text=True
    )
    packed_sources = llm_pack_result.stdout
    debug_log(args, "llm-pack output (packed sources) length:", len(packed_sources))
    debug_log(
        args,
        "llm-pack output (first 200 chars):\n",
        textwrap.shorten(packed_sources, width=200, placeholder="..."),
    )

    # 4. Prepare input for hnt-llm using XML format
    debug_log(args, "Preparing input for hnt-llm in XML format...")
    user_content_raw = (
        f"User request:\n{instruction}\n\nSource reference:\n{packed_sources}"
    )

    # Escape system message
    debug_log(args, "Escaping system message via hnt-escape...")
    escape_cmd = ["hnt-escape"]
    debug_log(args, "hnt-escape command (system):", escape_cmd)
    escaped_system_result = run_command(
        escape_cmd,
        stdin_content=system_message,
        capture_output=True,
        check=True,
        text=True,
    )
    escaped_system_message = escaped_system_result.stdout
    debug_log(args, "Escaped system message length:", len(escaped_system_message))

    # Escape user content
    debug_log(args, "Escaping user content via hnt-escape...")
    debug_log(args, "hnt-escape command (user):", escape_cmd)
    escaped_user_result = run_command(
        escape_cmd,
        stdin_content=user_content_raw,
        capture_output=True,
        check=True,
        text=True,
    )
    escaped_user_content = escaped_user_result.stdout
    debug_log(args, "Escaped user content length:", len(escaped_user_content))

    # Construct the final XML input using escaped content
    hnt_llm_input = (
        f"<hnt-system>{escaped_system_message}</hnt-system>\n"
        f"<hnt-user>{escaped_user_content}</hnt-user>"
    )
    debug_log(args, "Final hnt-llm input length:", len(hnt_llm_input))
    # Log structure and parts for debugging
    debug_log(
        args,
        "Final hnt-llm input structure: <hnt-system>...</hnt-system><hnt-user>...</hnt-user>",
    )
    debug_log(
        args, "Final hnt-llm input <hnt-system> length:", len(escaped_system_message)
    )
    # 4. Create a new chat conversation
    debug_log(args, "Creating new chat conversation via hnt-chat new...")
    hnt_chat_new_cmd = ["hnt-chat", "new"]
    debug_log(args, "hnt-chat new command:", hnt_chat_new_cmd)
    hnt_chat_new_result = run_command(
        hnt_chat_new_cmd, capture_output=True, check=True, text=True
    )
    conversation_dir = hnt_chat_new_result.stdout.strip()
    if not conversation_dir or not os.path.isdir(conversation_dir):
        print(
            f"Error: hnt-chat new did not return a valid directory path: '{conversation_dir}'",
            file=sys.stderr,
        )
        sys.exit(1)
    debug_log(args, "Conversation directory created:", conversation_dir)

    # 5. Add system message to conversation
    debug_log(args, "Adding system message via hnt-chat add...")
    hnt_chat_add_system_cmd = ["hnt-chat", "add", "system", "-c", conversation_dir]
    debug_log(args, "hnt-chat add system command:", hnt_chat_add_system_cmd)
    run_command(
        hnt_chat_add_system_cmd,
        stdin_content=system_message,
        # capture_output=False, # Don't need filename output - Capture it instead
        check=True,
        text=True,
    )
    debug_log(args, "System message added.")

    # 6. Add user request message to conversation
    debug_log(args, "Adding user request message via hnt-chat add...")
    user_request_content = f"<user_request>{instruction}</user_request>"
    hnt_chat_add_user_cmd = ["hnt-chat", "add", "user", "-c", conversation_dir]
    debug_log(args, "hnt-chat add user command (request):", hnt_chat_add_user_cmd)
    debug_log(
        args,
        "User request content (first 100 chars):\n",
        textwrap.shorten(user_request_content, width=100, placeholder="..."),
    )
    run_command(
        hnt_chat_add_user_cmd,
        stdin_content=user_request_content,
        # capture_output=False, # Don't need filename output - Capture it instead
        check=True,
        text=True,
    )
    debug_log(args, "User request message added.")

    # 7. Add empty assistant message to conversation (workaround for API limitations)
    debug_log(args, "Adding empty assistant message via hnt-chat add...")
    hnt_chat_add_assistant_cmd = [
        "hnt-chat",
        "add",
        "assistant",
        "-c",
        conversation_dir,
    ]
    debug_log(args, "hnt-chat add assistant command:", hnt_chat_add_assistant_cmd)
    run_command(
        hnt_chat_add_assistant_cmd,
        stdin_content="",  # Empty stdin for a blank message
        # capture_output=False, # Don't need filename output
        check=True,
        text=True,
    )
    debug_log(args, "Empty assistant message added.")

    # 8. Add source reference message to conversation
    debug_log(args, "Adding source reference message via hnt-chat add...")
    source_reference_content = f"<source_reference>{packed_sources}</source_reference>"
    # Reuse the command list, it's the same
    debug_log(args, "hnt-chat add user command (source):", hnt_chat_add_user_cmd)
    debug_log(
        args,
        "Source reference content (first 100 chars):\n",
        textwrap.shorten(source_reference_content, width=100, placeholder="..."),
    )
    run_command(
        hnt_chat_add_user_cmd,
        stdin_content=source_reference_content,
        # capture_output=False, # Don't need filename output - Capture it instead
        check=True,
        text=True,
    )
    debug_log(args, "Source reference message added.")

    # Show user query if it came from EDITOR
    if not args.message:
        print("-" * 40)
        print(instruction)
        print("-" * 40 + "\n")

    # 9. Run hnt-chat gen, stream and capture output
    debug_log(args, "Running hnt-chat gen...")
    hnt_chat_gen_cmd = ["hnt-chat", "gen", "--write", "-c", conversation_dir]
    if args.model:
        hnt_chat_gen_cmd.extend(["--model", args.model])
        debug_log(args, "Using model:", args.model)
    if args.debug_unsafe:
        hnt_chat_gen_cmd.append("--debug-unsafe")
        debug_log(args, "Passing --debug-unsafe to hnt-chat gen")
    # if we wanted the filename: hnt_chat_gen_cmd.append("--output-filename")
    debug_log(args, "hnt-chat gen command:", hnt_chat_gen_cmd)

    llm_output_capture = io.StringIO()  # Renamed from hnt_llm_output_capture
    rich_process = None  # Initialize rich_process outside try
    debug_log(args, "Syntax highlighting enabled:", syntax_highlight_enabled)
    if syntax_highlight_enabled:
        debug_log(args, "Syntax highlight command:", effective_syntax_cmd)

    try:
        debug_log(args, "Starting hnt-chat gen process via Popen...")
        # Use Popen for streaming stdout (hnt-chat gen doesn't need stdin)
        chat_gen_process = subprocess.Popen(
            hnt_chat_gen_cmd,
            stdin=subprocess.DEVNULL,  # Explicitly provide no stdin
            stdout=subprocess.PIPE,
            stderr=sys.stderr,  # Pipe stderr directly to terminal
            text=True,
            bufsize=1,  # Line buffered, might help with streaming
        )
        debug_log(args, f"hnt-chat gen process started. PID: {chat_gen_process.pid}")

        # Start syntax highlighter process if enabled
        if syntax_highlight_enabled:
            debug_log(args, "Starting syntax highlighter process via Popen...")
            try:
                # Use the command determined earlier (from env var or default)
                rich_process = subprocess.Popen(
                    effective_syntax_cmd,
                    stdin=subprocess.PIPE,
                    stdout=sys.stdout,  # Pipe rich output directly to terminal stdout
                    stderr=sys.stderr,  # Pipe rich errors directly to terminal stderr
                    text=True,
                )
                debug_log(
                    args, f"Syntax highlighter process started. PID: {rich_process.pid}"
                )
            except FileNotFoundError:
                # Use the actual command that was attempted
                debug_log(
                    args,
                    f"Syntax highlighter command '{effective_syntax_cmd[0]}' not found.",
                )
                print(
                    f"Error: Syntax highlighter command '{effective_syntax_cmd[0]}' not found.",
                    file=sys.stderr,
                )
                syntax_highlight_enabled = False  # Disable if Popen fails
            except Exception as e:
                debug_log(args, f"Error starting syntax highlighter: {e}")
                print(f"Error starting syntax highlighter: {e}", file=sys.stderr)
                syntax_highlight_enabled = False  # Disable on other errors
        else:
            debug_log(
                args,
                "Syntax highlighting not enabled, skipping highlighter process start.",
            )

        # Stream stdout from hnt-chat gen, capture it, and pipe to rich if enabled
        # No stdin writing needed for hnt-chat gen
        debug_log(args, "Starting hnt-chat gen stdout reading loop...")
        while True:
            line = chat_gen_process.stdout.readline()  # Use chat_gen_process
            if not line:
                debug_log(args, "hnt-chat gen stdout loop: EOF")  # Update log message
                break

            # Log the received line if debugging
            debug_log(
                args, f"hnt-chat gen stdout recv: {repr(line)}"
            )  # Update log message

            # Always capture the raw output
            llm_output_capture.write(
                line
            )  # Use llm_output_capture (already renamed in previous step)

            # Pipe to syntax highlighter OR print directly
            if syntax_highlight_enabled and rich_process:
                try:
                    rich_process.stdin.write(line)
                    rich_process.stdin.flush()
                except BrokenPipeError:
                    # Rich process might have exited (e.g., if user Ctrl+C'd)
                    print("Warning: Syntax highlighter pipe broken.", file=sys.stderr)
                    syntax_highlight_enabled = False  # Stop trying to write
                    # Print remaining lines directly
                    sys.stdout.write(line)
                    sys.stdout.flush()
                except Exception as e:
                    print(f"Error writing to syntax highlighter: {e}", file=sys.stderr)
                    syntax_highlight_enabled = False  # Stop trying to write
                    sys.stdout.write(line)
                    sys.stdout.flush()

            else:
                # Highlighting disabled or failed, print directly
                sys.stdout.write(line)
                sys.stdout.flush()

        # Close rich stdin if it was used
        if rich_process and rich_process.stdin:
            try:
                rich_process.stdin.close()
            except Exception as e:
                print(
                    f"Warning: Error closing syntax highlighter stdin: {e}",
                    file=sys.stderr,
                )

        # Wait for hnt-chat gen process to finish and check return code
        debug_log(args, "Waiting for hnt-chat gen process to finish...")
        chat_gen_rc = chat_gen_process.wait()
        debug_log(args, "hnt-chat gen process finished with return code:", chat_gen_rc)
        if chat_gen_rc != 0:
            debug_log(args, "hnt-chat gen failed.")
            # stderr was already piped to terminal
            print(
                f"\nError: '{' '.join(hnt_chat_gen_cmd)}' failed with exit code {chat_gen_rc}. See stderr above.",
                file=sys.stderr,
            )
            # Don't exit immediately if rich also needs cleanup/check
            # sys.exit(chat_gen_rc) # Moved after potential rich wait

    except FileNotFoundError:
        print(
            f"Error: Command not found during Popen: {hnt_chat_gen_cmd[0]}",
            file=sys.stderr,
        )
        sys.exit(1)
    except Exception as e:
        print(
            f"An unexpected error occurred while running {' '.join(hnt_chat_gen_cmd)}: {e}",
            file=sys.stderr,
        )
        # Ensure processes are terminated if they are still running
        if "chat_gen_process" in locals() and chat_gen_process.poll() is None:
            chat_gen_process.terminate()
            chat_gen_process.wait()  # Ensure termination
        if rich_process and rich_process.poll() is None:
            rich_process.terminate()
            rich_process.wait()  # Ensure termination
        sys.exit(1)
    finally:
        # Ensure resources are cleaned up even if errors occurred mid-stream

        # Wait for rich process if it was started
        rich_rc = 0
        if rich_process:
            rich_rc = rich_process.wait()
            if rich_rc != 0:
                # Rich errors likely already went to stderr, but log rc
                print(
                    f"Info: Syntax highlighter exited with code {rich_rc}",
                    file=sys.stderr,
                )

        # Now check hnt-chat gen's return code and exit if it failed
        # Use the previously captured return code
        if "chat_gen_rc" in locals() and chat_gen_rc != 0:
            sys.exit(chat_gen_rc)

    final_llm_output = llm_output_capture.getvalue()  # Renamed capture variable
    llm_output_capture.close()
    debug_log(args, "Captured hnt-chat gen output length:", len(final_llm_output))
    debug_log(
        args,
        "Captured hnt-chat gen output (first 200 chars):\n",
        textwrap.shorten(final_llm_output, width=200, placeholder="..."),
    )

    # Check if output is empty (might happen if hnt-chat gen failed silently or produced nothing)
    if not final_llm_output.strip():
        debug_log(args, "hnt-chat gen output is empty or whitespace only.")
        print(
            "Warning: hnt-chat gen produced no output. Aborting before running hnt-apply.",
            file=sys.stderr,
        )
        sys.exit(1)  # Or a specific error code

    # Print conversation directory before applying changes
    print(f"\nhnt-chat dir: {conversation_dir}", file=sys.stderr)

    # 10. Run hnt-apply (step number updated)
    debug_log(args, "Running hnt-apply...")
    hnt_apply_cmd = ["hnt-apply"] + args.source_files
    debug_log(args, "hnt-apply command:", hnt_apply_cmd)
    debug_log(args, "Piping captured hnt-chat gen output to hnt-apply stdin.")

    hnt_apply_stdout_capture = io.StringIO()
    hnt_apply_rc = 0
    try:
        debug_log(args, "Starting hnt-apply process via Popen...")
        apply_process = subprocess.Popen(
            hnt_apply_cmd,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=sys.stderr,  # Stream stderr directly
            text=True,
            bufsize=1,  # Line buffered potentially
        )
        debug_log(args, f"hnt-apply process started. PID: {apply_process.pid}")

        # Write hnt-chat gen output to hnt-apply's stdin
        debug_log(args, f"Writing {len(final_llm_output)} bytes to hnt-apply stdin...")
        try:
            apply_process.stdin.write(final_llm_output)
            apply_process.stdin.close()  # Signal EOF
            debug_log(args, "Finished writing to hnt-apply stdin.")
        except BrokenPipeError:
            debug_log(
                args, "hnt-apply stdin pipe broken (process may have exited early?)."
            )
        except Exception as e:
            debug_log(args, f"Error writing to hnt-apply stdin: {e}")
            # Process might still be running, continue to reading stdout

        # Stream hnt-apply stdout, capture it
        debug_log(args, "Starting hnt-apply stdout reading loop...")
        while True:
            line = apply_process.stdout.readline()
            if not line:
                debug_log(args, "hnt-apply stdout loop: EOF")
                break

            debug_log(args, f"hnt-apply stdout recv: {repr(line)}")

            # Capture
            hnt_apply_stdout_capture.write(line)
            # Stream
            sys.stdout.write(line)
            sys.stdout.flush()

        # Wait for hnt-apply to finish
        debug_log(args, "Waiting for hnt-apply process to finish...")
        hnt_apply_rc = apply_process.wait()
        debug_log(args, "hnt-apply process finished with return code:", hnt_apply_rc)

    except FileNotFoundError:
        print(f"Error: Command not found: {hnt_apply_cmd[0]}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(
            f"An unexpected error occurred while running {' '.join(hnt_apply_cmd)}: {e}",
            file=sys.stderr,
        )
        # Ensure process is terminated if it's still running
        if "apply_process" in locals() and apply_process.poll() is None:
            apply_process.terminate()
            apply_process.wait()
        sys.exit(1)

    # Check hnt-apply's exit code
    if hnt_apply_rc != 0:
        captured_apply_stdout = hnt_apply_stdout_capture.getvalue()
        hnt_apply_stdout_capture.close()  # Close the StringIO buffer

        print(
            f"\nError: '{' '.join(hnt_apply_cmd)}' failed with exit code {hnt_apply_rc}.",
            file=sys.stderr,
        )
        debug_log(args, "hnt-apply failed. Adding its stdout to the chat conversation.")
        debug_log(args, "Captured hnt-apply stdout length:", len(captured_apply_stdout))

        # 11. Add hnt-apply's raw stdout as a new user message if it failed
        hnt_chat_add_user_failure_cmd = [
            "hnt-chat",
            "add",
            "user",
            "-c",
            conversation_dir,
        ]
        debug_log(
            args, "hnt-chat add user command (failure):", hnt_chat_add_user_failure_cmd
        )
        debug_log(
            args,
            "Failure message content (hnt-apply stdout) length:",
            len(captured_apply_stdout),
        )
        try:
            run_command(
                hnt_chat_add_user_failure_cmd,
                stdin_content=captured_apply_stdout,
                check=True,
                text=True,
            )
            debug_log(args, "hnt-apply failure message added to chat.")
        except Exception as e:
            # Log this error, but proceed to exit with hnt-apply's error code
            print(
                f"Error adding hnt-apply failure message to chat: {e}", file=sys.stderr
            )
            debug_log(args, f"hnt-chat add user failed during error handling: {e}")

        sys.exit(hnt_apply_rc)  # Exit hnt-edit with hnt-apply's error code
    else:
        hnt_apply_stdout_capture.close()  # Close the buffer even on success
        debug_log(args, "hnt-apply finished successfully.")


if __name__ == "__main__":
    main()
